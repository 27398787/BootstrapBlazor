@page "/test"
@using System.ComponentModel

<p>
    <Button @onclick="e=>modal.Toggle()">添加项目</Button>
    <Modal @ref="modal">
        <ModalDialog Title="选择项目">
            <BodyTemplate>
                <Table TItem="BindItem" Context="add"
                       IsPagination="false" PageItemsSource="@PageItemsSource"
                       IsStriped="true" IsBordered="false"
                       ShowToolbar="true" ShowDefaultButtons="false" IsMultipleSelect="true"
                       OnQueryAsync="@OnEditQueryAsync">
                    <TableToolbarTemplate>
                        <TableToolbarButton TItem="BindItem" Color="Color.Primary" Text="确定" OnClickCallback="@Test1" />
                    </TableToolbarTemplate>

                    <TableColumns>
                        <TableColumn @bind-Field="@add.Type" />
                        <TableColumn @bind-Field="@add.Name" />
                        <TableColumn @bind-Field="@add.Price" />

                    </TableColumns>

                </Table>
            </BodyTemplate>
        </ModalDialog>
    </Modal>

</p>

<p>
    <div style="width:600px">
        <Table TItem="BindItem" @ref="table"
               IsPagination="false" PageItemsSource="@PageItemsSource"
               IsStriped="true" IsBordered="true"
               ShowToolbar="false" ShowSearch="false" IsMultipleSelect="true" ShowExtendButtons="true" ShowNewButton="false"
               AddModalTitle="增加数据窗口" EditModalTitle="编辑数据窗口"
               OnQueryAsync="@OnEditQueryAsync1"
               OnAddAsync="@OnAddAsync" OnSaveAsync="@OnSaveAsync" OnDeleteAsync="@OnDeleteAsync">
            <TableColumns>
                <TableColumn @bind-Field="@context.Type" Filterable="false" Sortable="false" />
                <TableColumn @bind-Field="@context.Name" Filterable="false" Sortable="false" />
                <TableColumn Width="60" @bind-Field="@context.Price" Filterable="false" Sortable="false" />
                <TableColumn Width="40" @bind-Field="@context.Counter" Filterable="false" Sortable="false" />
                <TableColumn Width="60" @bind-Field="@context.Sum" Filterable="false" Sortable="false" />
            </TableColumns>

            <EditTemplate>
                <div class="form-group col-6 col-sm-6">
                    <BootstrapInput IsDisabled="true" @bind-Value="@context.Type" placeholder="不可为空，50字以内" maxlength="50">
                        <RequiredValidator />
                        <StringLengthValidator Length="50" />
                    </BootstrapInput>
                    <BootstrapInput IsDisabled="true" @bind-Value="@context.Name" placeholder="不可为空，50字以内" maxlength="50">
                        <RequiredValidator />
                        <StringLengthValidator Length="50" />
                    </BootstrapInput>
                </div>

                <div class="form-group col-6 col-sm-6">
                    <BootstrapInput IsDisabled="true" @bind-Value="@context.Price" placeholder="不可为空" maxlength="50">
                        <RequiredValidator />
                        <StringLengthValidator Length="50" />
                    </BootstrapInput>
                    <BootstrapInput @bind-Value="@context.Counter" placeholder="输入整数，不可为空" maxlength="50">
                        <RequiredValidator />
                        <StringLengthValidator Length="50" />
                        <MinValidator Value="1" />
                    </BootstrapInput>
                </div>
            </EditTemplate>
        </Table>

    </div>
</p>

@code {
    public class BindItem
    {
        /// <summary>
        ///
        /// </summary>
        [DisplayName("编号")]
        public int Id { get; set; }
        [DisplayName("类别")]
        public string? Type { get; set; }
        [DisplayName("项目")]
        public string? Name { get; set; }

        [DisplayName("价格")]
        public int Price { get; set; } = 1;

        [DisplayName("数量")]
        public int Counter { get; set; } = 0;

        [DisplayName("金额")]
        public int Sum { get; set; }
        /// <summary>
        ///
        /// </summary>
        [DisplayName("日期")]
        public DateTime? DateTime { get; set; }

        [DisplayName("类别")]
        public string? Address { get; set; }

    }


    public virtual string DisplayName { get; }
    private Modal? modal { get; set; }
    private static readonly Random random = new Random();
    public Table<BindItem>? table { get; set; }

    protected static List<BindItem> GenerateItems() => new List<BindItem>(Enumerable.Range(1, 5).Select(i => new BindItem()
    {
        Id = i,
        Name = $"项目 {i:d4}",
        Type = $"商品 {random.Next(1000, 2000)} 类",
        Counter = random.Next(1, 100),
        Price = random.Next(100, 1000),
        DateTime = DateTime.Now.AddDays(i - 1)

    }));


    protected static IEnumerable<BindItem> Items { get; } = GenerateItems();
    private IEnumerable<int> PageItemsSource => new int[] { 2 };
    private List<BindItem> Items1 { get; set; } = new List<BindItem>();

    private static readonly object _objectLock = new object();


    protected List<BindItem> EditItems { get; set; } = GenerateItems();


    protected Task<QueryData<BindItem>> OnEditQueryAsync(QueryPageOptions options) => BindItemQueryAsync(EditItems, options);
    protected Task<QueryData<BindItem>> OnEditQueryAsync1(QueryPageOptions options) => BindItemQueryAsync1(Items1, options);


    protected Task<BindItem> OnAddAsync()
    {
        return Task.FromResult(new BindItem() { DateTime = DateTime.Now });
    }


    protected Task<bool> OnSaveAsync(BindItem item)
    {
        // 增加数据演示代码
        if (item.Id == 0)
        {
            lock (_objectLock)
            {
                item.Id = Items1.Max(i => i.Id) + 1;
                Items1.Add(item);
            }
        }
        else
        {
            var oldItem = Items1.FirstOrDefault(i => i.Id == item.Id);
            oldItem.Counter = item.Counter;

        }
        return Task.FromResult(true);
    }
    private async Task Test1(IEnumerable<BindItem> items)
    {
        //Items1 = Items.Intersect(items).ToList();
        Items1 = items.ToList();
        await table.QueryAsync();
        modal?.Toggle();
        await Task.FromResult(true);
    }


    protected Task<bool> OnDeleteAsync(IEnumerable<BindItem> items)
    {
        items.ToList().ForEach(i => Items1.Remove(i));

        return Task.FromResult(true);

    }


    private BindItem SearchModel { get; set; } = new BindItem();

    protected Task<QueryData<BindItem>> BindItemQueryAsync(IEnumerable<BindItem> items, QueryPageOptions options)
    {

       
        var total = items.Count();
        // 内存分页
        items = items.Skip((options.PageIndex - 1) * options.PageItems).Take(options.PageItems).ToList();

        return Task.FromResult(new QueryData<BindItem>()
        {
            Items = items,
            TotalCount = total,


        });
    }
    protected Task<QueryData<BindItem>> BindItemQueryAsync1(IEnumerable<BindItem> items, QueryPageOptions options)
    {
        var total = items.Count();       

        return Task.FromResult(new QueryData<BindItem>()
        {
            Items = items,
            TotalCount = total
        });
    }
}